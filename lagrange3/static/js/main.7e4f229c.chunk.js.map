{"version":3,"sources":["components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["CustomModal","props","console","log","handleChange","e","target","name","value","type","checked","activeItem","state","setState","editItem","this","toggle","onSave","Modal","isOpen","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","desc","onChange","placeholder","start_date","end_date","parent_id","ModalFooter","Button","color","onClick","Component","taskItems","App","modal","handleSubmit","item","alert","JSON","stringify","id","axios","put","then","res","refreshList","post","handleDelete","delete","createItem","text","addChild","parent","viewItem","get","taskArray","data","catch","err","renderTasks","map","key","className","href","src","alt","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e4f229c.chunk.js","sourcesContent":[" // l3-app/src/components/Modal.js\n\n    import React, { Component } from \"react\";\n    import {\n      Button,\n      Modal,\n      ModalHeader,\n      ModalBody,\n      ModalFooter,\n      Form,\n      FormGroup,\n      Input,\n      Label\n    } from \"reactstrap\";\n\n    export default class CustomModal extends Component {\n\tconstructor(props) {\n\t    console.log(props);\n            super(props);\n            this.state = {\n\t\tactiveItem: this.props.activeItem,\n\t\teditItem: this.props.editItem,\n            };\n\t}\n\thandleChange = e => {\n            let { name, value } = e.target;\n            if (e.target.type === \"checkbox\") {\n\t\tvalue = e.target.checked;\n            }\n            const activeItem = { ...this.state.activeItem, [name]: value };\n            this.setState({ activeItem });\n\t};\n      render() {\n          const { toggle, onSave,editItem } = this.props;\n        return (\n          <Modal isOpen={true} toggle={toggle}>\n\t\t<ModalHeader toggle={toggle}> Task Item </ModalHeader>\n            <ModalBody>\n              <Form>\n                <FormGroup>\n                  <Label for=\"title\">Description</Label>\n                  <Input\n                    type=\"text\"\n                    name=\"desc\"\n                    value={this.state.activeItem.desc}\n                    onChange={this.handleChange}\n                    placeholder=\"Enter Description\"\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"description\">Start Date</Label>\n                  <Input\n                    type=\"date\"\n                    name=\"start_date\"\n                    value={this.state.activeItem.start_date}\n                    onChange={this.handleChange}\n                    placeholder=\"Enter Start Date\"\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"description\">End Date</Label>\n                  <Input\n                    type=\"date\"\n                    name=\"end_date\"\n                    value={this.state.activeItem.end_date}\n                    onChange={this.handleChange}\n                    placeholder=\"Enter Date Date\"\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"description\">Parent ID</Label>\n                  <Input\n                    type=\"text\"\n                    name=\"parent_id\"\n                    value={this.state.activeItem.parent_id}\n                    onChange={this.handleChange}\n                    placeholder=\"Enter Parent ID\"\n                  />\n                </FormGroup>\n              </Form>\n            </ModalBody>\n\t\t{this.state.editItem ? (\n\t\t\t<ModalFooter>\n\t\t\t<Button color=\"success\" onClick={() => onSave(this.state.activeItem)}>\n\t\t\tSave\n\t\t    </Button>\n\t\t\t</ModalFooter>\n\t\t) : null}\n\t    </Modal>\n\t);\n      }\n    }\n","import React, { Component } from \"react\";\nimport Modal from \"./components/Modal\";\nimport axios from \"axios\";\n\nimport './App.css';\n\nvar taskItems = []\n\n/*\nconst taskItems = [\n    {\"id\":20,\"text\":\"Build a nice House\",\"start_date\":\"2020-01-01\",\"end_date\":\"2020-01-25\",\"parent_id\":0},\n    {\"id\":21,\"text\":\"Prep building site\",\"start_date\":\"2020-01-01\",\"end_date\":\"2020-01-10\",\"parent_id\":20},\n    {\"id\":23,\"text\":\"sub-insulation\",\"start_date\":\"2020-01-11\",\"end_date\":\"2020-01-17\",\"parent_id\":24},\n    {\"id\":24,\"text\":\"Foundation\",\"start_date\":\"2020-01-11\",\"end_date\":\"2020-01-21\",\"parent_id\":20},\n    {\"id\":26,\"text\":\"radiant heat tubing\",\"start_date\":\"2020-01-20\",\"end_date\":\"2020-01-22\",\"parent_id\":24},\n    {\"id\":27,\"text\":\"reinforcing wire\",\"start_date\":\"2020-01-23\",\"end_date\":\"2020-01-25\",\"parent_id\":24}\n];\n*/\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\t    modal: false,\n\t    activeItem: {\n\t\ttext: \"\",\n\t\tstart_date: \"\",\n\t\tend_date: \"\",\n\t\tparent_id: \"\"\n            },\n\t    editItem: true,\n            taskArray: taskItems,\n\t};\n    }\n\n    toggle = () => {\n        this.setState({ modal: !this.state.modal });\n      };\n    handleSubmit = item => {\n        this.toggle();\n        alert(\"save\" + JSON.stringify(item));\n\tif (item.id) {\n            axios\n\t\t.put(`http://lagrange3-dev.us-east-2.elasticbeanstalk.com/L3/rest-app/tasks/${item.id}/`, item)\n\t\t.then(res => this.refreshList());\n\t    return;\n\t}\n        axios\n\t    .post(\"http://lagrange3-dev.us-east-2.elasticbeanstalk.com/L3/rest-app/tasks/\", item)\n\t    .then(res => this.refreshList());\n\t\n    };\n    handleDelete = item => {\n        alert(\"delete\" + JSON.stringify(item));\n\taxios\n            .delete(`http://lagrange3-dev.us-east-2.elasticbeanstalk.com/L3/rest-app/tasks/${item.id}/`)\n\t\t    .then(res => this.refreshList());\n\n    };\n    createItem = () => {\n        const item = {\n\t    text: \"\",\n\t    start_date: \"\",\n\t    end_date: \"\",\n\t    parent_id: \"\"\n\t};\n        this.setState({ activeItem: item, editItem: true, modal: !this.state.modal });\n    };\n\n    addChild = parent => {\n        const item = {\n\t    text: \"\",\n\t    start_date: \"\",\n\t    end_date: \"\",\n\t    parent_id:parent.id\n\t};\n        this.setState({ activeItem: item, editItem: true, modal: !this.state.modal });\n    };\n\n    editItem = item => {\n        this.setState({ activeItem: item, editItem: true, modal: !this.state.modal });\n    };\n    \n    viewItem = item => {\n        this.setState({ activeItem: item, editItem: false,  modal: !this.state.modal });\n    };\n    \n    \n    refreshList = () => {\n        axios\n            .get(\"http://lagrange3-dev.us-east-2.elasticbeanstalk.com/L3/rest-app/tasks/\")\n            .then(res => this.setState({ taskArray: res.data }))\n            .catch(err => console.log(err));\n    };\n\n//    componentDidMount() {\n//        this.refreshList();\n//    }\n\n     async componentDidMount() {\n        // Load async data.\n        let userData = await  axios\n            .get(\"http://lagrange3-dev.us-east-2.elasticbeanstalk.com/L3/rest-app/tasks/\")\n            .then(res => this.setState({ taskArray: res.data }))\n            .catch(err => console.log(err));\n     }\n\n    renderTasks = () => {\n\t//this.refreshList();\n\t//console.log(\"this.state.taskArray: \",this.state.taskArray);\n\treturn this.state.taskArray.map(item => (\n        <tr key={item.id} >\n\t  <td onClick={() => this.viewItem(item)}> {item.id}</td><td onClick={() => this.viewItem(item)}> {item.desc}</td><td onClick={() => this.viewItem(item)}> {item.start_date}</td><td onClick={() => this.viewItem(item)}> {item.end_date}</td><td onClick={() => this.viewItem(item)}> {item.parent_id}</td>\n\t  <td>\n\t    <button onClick={() => this.addChild(item)} className=\"btn btn-secondary mr-2\"> + Child </button>\n\t    <button onClick={() => this.editItem(item)} className=\"btn btn-secondary mr-2\"> Edit </button>\n\t    <button onClick={() => this.handleDelete(item)} className=\"btn btn-danger\">Delete </button>\n\t  </td>\n\t</tr>\n\t));\n\t};\n    \n\trender() {\n\treturn (<div>\n\t\t  <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n\t\t    <a className=\"navbar-brand\" href=\"#\"><img src=\"L3.svg\" alt=\"\"/>Lagrange Project Task Manager</a>\n\t\t    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n\t\t      <span className=\"navbar-toggler-icon\"></span>\n\t\t    </button>\n\t\t    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n\t\t      <ul className=\"navbar-nav mr-auto\">\n\t\t\t<li className=\"nav-item active\">\n\t\t\t  <a className=\"nav-link\" href=\"#\">List <span className=\"sr-only\">(current)</span></a>\n\t\t\t</li>\n\t\t\t<li className=\"nav-item\">\n\t\t\t  <a className=\"nav-link\" href=\"#\">Show Gantt Chart</a>\n\t\t\t</li>\n\t\t\t<li className=\"nav-item\">\n\t\t\t  <a className=\"nav-link\" onClick={this.createItem}  href=\"#\">Add Task</a>\n\t\t\t</li>\n\t\t      </ul>\n\t\t      <span className=\"navbar-text\">\n\t\t\tSigned in as Jose Doe. <a href=\"#\">Sign Out.</a>\n\t\t      </span>\n\t\t    </div>\n\t\t  </nav>\n\t\t  <main className=\"container\">\n\t\t    <div className=\"row \">\n\t\t      <div className=\"col-md-10 col-sm-10 mx-auto p-0\">\n\t\t\t<div className=\"card p-3\">\n\t\t\t  <table className=\"table table-striped table-bordered table-hover table-responsive\">\n\t\t\t    <thead><tr>\n\t\t\t\t<th>ID</th><th>Desc</th><th>Start</th><th>End</th><th>Parent</th><th>&nbsp;</th>\n\t\t\t    </tr></thead>\n\t\t\t    <tbody>\n\t\t\t      {this.renderTasks()}\n\t\t\t    </tbody>\n\t\t\t  </table>\n\t\t\t</div>\n\t\t      </div>\n\t\t    </div>\n\t\t{this.state.modal ? (\n\t\t\t<Modal\n                    activeItem={this.state.activeItem}\n                    toggle={this.toggle}\n                    onSave={this.handleSubmit}\n\t\t    editItem={this.state.editItem}\n\t\t\t/>\n\t\t) : null}\n\t\t</main>\n\t\t</div>\n               );\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}